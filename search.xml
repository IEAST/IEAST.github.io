<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>wanna build 和 buildd 不完全使用指南</title>
      <link href="/2025/03/14/wanna-build%E5%92%8Cbuildd%E4%B8%8D%E5%AE%8C%E5%85%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2025/03/14/wanna-build%E5%92%8Cbuildd%E4%B8%8D%E5%AE%8C%E5%85%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>最近在 Debian 上折腾Debian for rva22 ，看了一下 Debian 提供了较为完善的生态能够很方便的构建和维护自己的发行版。主要用到的工具有 wanna build , reprepro , buildd 这三个。他们的关系图如下：</p><p><img src="/2025/03/14/wanna-build%E5%92%8Cbuildd%E4%B8%8D%E5%AE%8C%E5%85%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/wanna-build_buildd_reprepro_%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="wanna build , buildd , reprepro 关系图"></p><p>接下来我介绍以下这三种工具的使用和他们的联系，大部分的内容是基于 debian wiki 的信息，还有少部分内容是踩过的一些坑。</p><p>通常情况下， wanna build 和 reprepro 是在同一台性能一般的机器上，主要负责仓库管理和维护。 buildd 运行在性能强劲的构建机上的，可以有一台或者多台。</p><h2 id="1-reprepro"><a href="#1-reprepro" class="headerlink" title="1. reprepro"></a>1. reprepro</h2><h3 id="1-1-install"><a href="#1-1-install" class="headerlink" title="1.1 install"></a>1.1 install</h3><p>Debian 仓库中提供了 reprepro，因此可以直接安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install reprepro</span><br></pre></td></tr></table></figure><h3 id="1-2-创建仓库目录"><a href="#1-2-创建仓库目录" class="headerlink" title="1.2 创建仓库目录"></a>1.2 创建仓库目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /srv/ftp.debian.org/ftp/apt/</span><br><span class="line"><span class="built_in">cd</span> /srv/ftp.debian.org/ftp/apt/</span><br><span class="line"><span class="built_in">mkdir</span> conf dists incoming indices logs pool project</span><br></pre></td></tr></table></figure><p>这里，第一个路径 <code>/srv/ftp.debian.org/ftp/apt/</code> 可自行替换，建议替换为当前想要构建的版本代号。例如：我的 rva22 的路径就是 <code>/repo/rva22/repo</code></p><h3 id="1-3-配置文件"><a href="#1-3-配置文件" class="headerlink" title="1.3 配置文件"></a>1.3 配置文件</h3><p>配置文件在 <code>conf</code> 路径下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /srv/ftp.debian.org/ftp/apt/conf/</span><br></pre></td></tr></table></figure><h4 id="1-3-1-distributions"><a href="#1-3-1-distributions" class="headerlink" title="1.3.1 distributions"></a>1.3.1 distributions</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim distributions</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Origin:</span> <span class="string">Alexander</span> <span class="string">Pashaliyski</span></span><br><span class="line"><span class="attr">Label:</span> <span class="string">Alexander</span> <span class="string">Pashaliyski</span></span><br><span class="line"><span class="attr">Codename:</span> <span class="string">sid</span></span><br><span class="line"><span class="attr">Architectures:</span> <span class="string">i386</span> <span class="string">amd64</span> <span class="string">source</span></span><br><span class="line"><span class="attr">Components:</span> <span class="string">main</span></span><br><span class="line"><span class="attr">Description:</span> <span class="string">Alexander</span> <span class="string">Pashaliyski</span> <span class="string">APT</span> <span class="string">Repository</span></span><br><span class="line"><span class="attr">SignWith:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><p>下面是一些字段解释：<code>Origin</code> 代表仓库维护者或组织名称，<code>Label</code> 代表仓库名称，<code>Codename</code> 表示发行版的代号，<code>Architectures</code> 指定该仓库支持的 CPU 架构，<code>Components</code> 表示该仓库包含的组件，<code>Description</code> 说明该仓库的用途，<code>SignWith</code> 指定是否对仓库进行 GPG 签名。</p><p>同时还有一些字段这里面没有显示出来，包括了 <code>Version</code>,<code>UDebComponents</code>,<code>Log</code> 同时还能指定 log 文件，方便日后定位问题。</p><p>同时，一个 <code>distributions</code> 中可以写多个仓库，但是最好还是创建不同的仓库目录会更好。但是如果你像我一样建立仓库导入 source 的时候没有仔细甄别，遇到  oracular<br>中依赖了 oracular-security 的 pkg,那就可以写在同一个 <code>distributions</code> 中。</p><h4 id="1-3-2-incoming"><a href="#1-3-2-incoming" class="headerlink" title="1.3.2 incoming"></a>1.3.2 incoming</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vim incoming</span></span><br></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Name:</span> <span class="keyword">default</span></span><br><span class="line"><span class="symbol">IncomingDir:</span> incoming</span><br><span class="line"><span class="symbol">TempDir:</span> /tmp</span><br><span class="line"><span class="symbol">Allow:</span> sid</span><br><span class="line"><span class="symbol">Cleanup:</span> on_deny on_error</span><br></pre></td></tr></table></figure><p><code>incoming</code> 是定义如何处理上传到仓库的 .deb 包。它有 5 个字段。 比较重要的是 <code>Allow</code> 字段，表明了允许导入的软件包的目标发行版，不再目标发行版中的软件包将无法被导入。</p><h4 id="1-3-3-options"><a href="#1-3-3-options" class="headerlink" title="1.3.3 options"></a>1.3.3 options</h4><p><code>options</code> 用来定义 reprepro 的基本工作目录和行为, wiki 中这部分的内容比较少，我在补充以一下我的配置</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> <span class="keyword">options</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">verbose</span><br><span class="line">basedir repo/xxx</span><br><span class="line">outdit out/xxx</span><br><span class="line">morguedir +o/archrives</span><br><span class="line">logdir +o/log</span><br></pre></td></tr></table></figure><p>以下是字段解释</p><ul><li>verbose: 开启详细模式，方便排查问题</li><li>basedir: 仓库的基础目录，所有的操作都将会在这个目录中</li><li>outdit: 输出目录，可用于 web 服务器提供仓库服务</li><li>morguedir: 存放删除的软件包，避免手滑</li><li>logdir:日志目录，方便记录日志</li></ul><h4 id="1-3-4-updates"><a href="#1-3-4-updates" class="headerlink" title="1.3.4 updates"></a>1.3.4 updates</h4><p>上游配置，用于从上游仓库同步软件包</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vim updates</span></span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Name: import</span><br><span class="line"><span class="keyword">Method</span>: https:<span class="comment">//mirror.nju.edu.cn/xxxxx</span></span><br><span class="line">Suite: oracular</span><br><span class="line">Components: main restricted universe multiverse</span><br><span class="line">Architectures: source</span><br><span class="line">IgnoreRelease: yes</span><br><span class="line">UDebComponents: main</span><br></pre></td></tr></table></figure><p>这是我的配置，字段解释如下</p><ul><li>Name: 规则名称</li><li>Method: 上游仓库的地址</li><li>Suite: 发行版名称，需要和 distributions 中的 codename 匹配 </li><li>Components: 指定拉去的软件包组件</li><li>Architectures: 需要同步的架构，因为这边我准备完全重新编译，所以就只导入了源代码</li><li>IgnoreRelease: 是否要忽略 Release 文件校验</li><li>UDebComponents: 指定 udeb 组件</li></ul><p>同样，一个 update 中也可以写多个 import 规则，只需要名字和对应的发行版区分开就好</p><p>至此， reprepro 的基础配置就已经完成了。</p><h3 id="1-4-使用"><a href="#1-4-使用" class="headerlink" title="1.4 使用"></a>1.4 使用</h3><h4 id="1-4-1-更新软件包索引"><a href="#1-4-1-更新软件包索引" class="headerlink" title="1.4.1 更新软件包索引"></a>1.4.1 更新软件包索引</h4><p>获取上游软件包,更新软件包索引</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reprepro -b . update oracula</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> 执行这条命令的时候需要在 <code>/srv/ftp.debian.org/ftp/apt/</code> 目录下，其中的 <code>.</code> 指的是当前路径。如果不在 <code>/srv/ftp.debian.org/ftp/apt/</code> 路径下，需要将 <code>.</code> 替换为绝对路径，该命令变形为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reprepro -b /srv/ftp.debian.org/ftp/apt/ update oracula</span><br></pre></td></tr></table></figure><h4 id="1-4-2-导入-deb-包-x2F-dsc-文件"><a href="#1-4-2-导入-deb-包-x2F-dsc-文件" class="headerlink" title="1.4.2 导入 deb 包&#x2F; dsc 文件"></a>1.4.2 导入 deb 包&#x2F; dsc 文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reprepro -b /srv/ftp.debian.org/ftp/apt/ includedeb oracular *.deb</span><br><span class="line"></span><br><span class="line">reprepro -b /srv/ftp.debian.org/ftp/apt/ includedsc oracular *.dsc</span><br></pre></td></tr></table></figure><h4 id="1-4-3-查看软件包-list"><a href="#1-4-3-查看软件包-list" class="headerlink" title="1.4.3 查看软件包 list"></a>1.4.3 查看软件包 list</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reprepro -b /srv/ftp.debian.org/ftp/apt/ list oracular</span><br></pre></td></tr></table></figure><h4 id="1-4-4-删除-deb-包"><a href="#1-4-4-删除-deb-包" class="headerlink" title="1.4.4 删除 deb 包"></a>1.4.4 删除 deb 包</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reprepro -b /srv/ftp.debian.org/ftp/apt/ removesrc oracular  pkgname</span><br></pre></td></tr></table></figure><p>以上就是 reprepro 的基本操作和配置，还有部分操作等之后遇到了在继续分享。</p><h2 id="wanna-build"><a href="#wanna-build" class="headerlink" title="wanna build"></a>wanna build</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p>wanna build 和 reprepro 不一样， wanna build 目前并不是 debian 的一个软件包，所以需要手动安装。还好官网给了不错的安装教程。</p><ol><li><p>通过 github 获取 wanna build 的仓库</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /srv</span><br><span class="line">git <span class="built_in">clone</span> https://salsa.debian.org/wb-team/wanna-build.git /srv/wanna-build</span><br><span class="line"><span class="built_in">ln</span> -s /srv/wanna-build/bin/wanna-build /usr/local/bin/wanna-build</span><br></pre></td></tr></table></figure></li><li><p>安装运行依赖</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install libdbi-perl libyaml-libyaml-perl libhash-merge-perl libstring-format-perl libtimedate-perl libyaml-tiny-perl libdpkg-perl libdbd-pg-perl libany-uri-escape-perl dctrl-tools moreutils dose-builddebcheck dose-distcheck</span><br></pre></td></tr></table></figure></li><li><p>安装数据库</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install postgresql-<span class="variable">$&#123;version&#125;</span> postgresql-<span class="variable">$&#123;version&#125;</span>-debversion</span><br></pre></td></tr></table></figure></li><li><p>导入数据库</p><p> 切换到数据库用户</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su postgres</span><br><span class="line">psql</span><br></pre></td></tr></table></figure><p> 创建数据库</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE wannadb;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> wbadm <span class="keyword">WITH</span> PASSWORD <span class="string">&#x27;wannapass&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> DATABASE wannadb <span class="keyword">to</span> wbadm;</span><br><span class="line"><span class="keyword">ALTER</span> ROLE wbadm CREATEROLE;</span><br></pre></td></tr></table></figure><p> 退出数据库，然后导入 sql 文件</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br><span class="line"></span><br><span class="line">psql -d wannadb -f /srv/wanna-build/schema/roles.sql</span><br><span class="line">psql -d wannadb -f /srv/wanna-build/schema/main-tables.sql</span><br></pre></td></tr></table></figure></li><li><p>生成特定架构的 wanna build 表</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /srv/wanna-build/schema/</span><br><span class="line">./arches-tables.sh <span class="variable">$ARCH</span> | psql -d wannadb</span><br></pre></td></tr></table></figure><p> <strong>注意</strong>: $ARCH 记得替换成想要生成的架构， 包括不限于 riscv64, x86 等。请按需填写</p></li><li><p>创建 wanna build 用户</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line">adduser --disabled-password --gecos <span class="string">&quot;&quot;</span>  wbadm</span><br><span class="line"><span class="built_in">mkdir</span> -p /srv/wanna-build/tmp</span><br><span class="line"><span class="built_in">chmod</span> 750 /srv/wanna-build/tmp/</span><br><span class="line"><span class="built_in">chown</span> wbadm /srv/wanna-build/tmp/</span><br></pre></td></tr></table></figure><p> wanna build 配置完成之后，大部分的操作都会在这个用户下进行</p></li><li><p>配置 wbadm 和 sql 的连接</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/share/postgresql/*/pg_service.conf.sample /etc/postgresql-common/pg_service.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/postgresql-common/pg_service.conf</span><br><span class="line">[wanna-build]</span><br><span class="line">dbname=wannadb</span><br><span class="line">user=wbadm</span><br><span class="line"></span><br><span class="line">[wanna-build-privileged]</span><br><span class="line">dbname=wannadb</span><br><span class="line">user=wbadm</span><br></pre></td></tr></table></figure><p> 同时允许 wbadm 用户允许本地访问数据库</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/postgresql/*/main/pg_hba.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> all wbadm trust</span><br></pre></td></tr></table></figure><p> 这里面的 <code>*</code> 请自行替换为自己的 sql 版本</p></li><li><p>重启数据库</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    /etc/init.d/postgresql restart</span><br><span class="line">    ````</span><br><span class="line"></span><br><span class="line"><span class="comment">### 插入架构和构建版本信息</span></span><br><span class="line"></span><br><span class="line">这部分内容都是对数据库的操作，其中很多内容都需要进行替换。</span><br><span class="line"></span><br><span class="line">1. 登录到 wbadm 数据库</span><br><span class="line"></span><br><span class="line">    ```sh</span><br><span class="line">    su postgres</span><br><span class="line">    psql -U wbadm -d wannadb</span><br></pre></td></tr></table></figure></li><li><p>定义支持的架构和发行版</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> distributions(distribution,build_dep_resolver) <span class="keyword">VALUES</span> (<span class="string">&#x27;sid&#x27;</span>,<span class="string">&#x27;apt&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> architectures(architecture) <span class="keyword">VALUES</span> (<span class="string">&#x27;amd64&#x27;</span>),(<span class="string">&#x27;i386&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> distribution_architectures(distribution,architecture,archive) <span class="keyword">VALUES</span> (<span class="string">&#x27;sid&#x27;</span>,<span class="string">&#x27;amd64&#x27;</span>,<span class="string">&#x27;debian&#x27;</span>),(<span class="string">&#x27;sid&#x27;</span>,<span class="string">&#x27;i386&#x27;</span>,<span class="string">&#x27;debian&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> locks(distribution,architecture) <span class="keyword">VALUES</span> (<span class="string">&#x27;sid&#x27;</span>,<span class="string">&#x27;amd64&#x27;</span>),(<span class="string">&#x27;sid&#x27;</span>,<span class="string">&#x27;i386&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这里面的 <code>distribution</code>， <code>architecture</code> 要和 reprepro 中的配置保持一致。</p></li><li><p>设定发行版别名 (可选)</p> <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> distribution_aliases(distribution,<span class="keyword">alias</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;sid&#x27;</span>,<span class="string">&#x27;unstable&#x27;</span>);</span><br></pre></td></tr></table></figure><p> 表示 unstable 是 sid 发行版的 别名。</p></li></ol><h3 id="添加-Packages-arch-specific"><a href="#添加-Packages-arch-specific" class="headerlink" title="添加 Packages-arch-specific"></a>添加 Packages-arch-specific</h3><pre><code>packages-arch-specific 是debian 中列出仅适用于特定架构的软件包的一个文件。 因为我只是单一架构，所以并未涉及到这部分，就只做摘录。</code></pre><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line">SUITE=sid</span><br><span class="line"><span class="built_in">mkdir</span> -p /srv/buildd.debian.org/web/quinn-diff/<span class="variable">$&#123;SUITE&#125;</span></span><br><span class="line"><span class="built_in">cd</span> /srv/buildd.debian.org/web/quinn-diff/<span class="variable">$&#123;SUITE&#125;</span>/</span><br><span class="line">wget https://buildd.debian.org/quinn-diff/<span class="variable">$&#123;SUITE&#125;</span>/Packages-arch-specific</span><br></pre></td></tr></table></figure><h3 id="添加软件包到数据库"><a href="#添加软件包到数据库" class="headerlink" title="添加软件包到数据库"></a>添加软件包到数据库</h3><p>这里面需要用到一个 trigger.local 的文件。<br>在 <a href="https://wiki.debian.org/DebianWannaBuildInfrastructureOnOneServer?action=AttachFile&do=view&target=trigger.local">wiki</a> 上有这样一份文件案例，我只讲述修改的部分。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ARCHIVE</span>=<span class="string">&#x27;local&#x27;</span></span><br><span class="line"><span class="attr">SUITES</span>=<span class="string">&quot;sid&quot;</span></span><br><span class="line"><span class="attr">ARCHES</span>=<span class="string">&quot;amd64 i386&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">REPOSITORY</span>=<span class="string">&#x27;/org/ftp.debian.org/ftp/apt/dists&#x27;</span></span><br></pre></td></tr></table></figure><p>需要注意的是文件开头的部分</p><ul><li><code>ARCHIVE</code> 指定的是储存库的名称，可以任意起名</li><li><code>SUITES</code> 指定支持的发行版，和 <code>distribution</code> 保持一致。</li><li><code>ARCHES</code> 指定支持的架构，记得按需修改</li><li><code>REPOSITORY</code> 这个很重要，指定了仓库的 dists&#x2F; 目录路径，里面存放的是 Packages.gz 和 Release 文件。这个路径是 reprepro 的路径，记得一直写到 <code>dists</code> 层。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># copy trigger.local into /srv/wanna-build/triggers</span></span><br><span class="line">su</span><br><span class="line"><span class="built_in">chmod</span> a+x /srv/wanna-build/triggers/trigger.local</span><br><span class="line">su wbadm</span><br><span class="line"><span class="built_in">cd</span> /srv/wanna-build/triggers</span><br><span class="line">./trigger.local</span><br></pre></td></tr></table></figure><p>有几个仓库就需要有几个 trigger.local，当然是可以更改名称和后缀了，为了便于多仓库之间的区分，我建议直接用仓库名称命名。</p><h4 id="踩坑小贴士"><a href="#踩坑小贴士" class="headerlink" title="踩坑小贴士"></a>踩坑小贴士</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> suite <span class="keyword">in</span> <span class="variable">$SUITES</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">SOURCES=<span class="string">&quot;Sources.<span class="variable">$suite</span>.incoming-filtered.gz&quot;</span></span><br><span class="line">filter_out_nonfree <span class="string">&quot;<span class="variable">$ARCHIVE_BASE</span>/archive/<span class="variable">$suite</span>/main/source/Sources.gz&quot;</span> <span class="string">&quot;<span class="variable">$SOURCES</span>&quot;</span></span><br><span class="line">PACKAGES=<span class="string">&quot;<span class="variable">$ARCHIVE_BASE</span>/archive/<span class="variable">$suite</span>/main/binary-%ARCH%/Packages.gz&quot;</span></span><br><span class="line">trigger_wb_update <span class="string">&quot;<span class="variable">$suite</span>&quot;</span> <span class="string">&quot;<span class="variable">$ARCHES</span>&quot;</span> <span class="string">&quot;<span class="variable">$SOURCES</span>&quot;</span> <span class="string">&quot;<span class="variable">$PACKAGES</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>trigger.local</code> 里面有一点点小坑，里面用到了一个脚本 <code>filter_out_nonfree</code> 已经被移除了，会报错找不到命令。我们研究后发现， <code>filter_out_nonfree</code> 这个函数并没有做什么别的事情，只是在复制而已。于是可以直接简单除暴的修改为 <code>cp</code>,修改后的如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> suite <span class="keyword">in</span> <span class="variable">$SUITES</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    SOURCES=<span class="string">&quot;Sources.<span class="variable">$suite</span>.incoming-filtered.gz&quot;</span></span><br><span class="line">    <span class="built_in">cp</span> <span class="string">&quot;<span class="variable">$ARCHIVE_BASE</span>/archive/<span class="variable">$suite</span>/main/source/Sources.gz&quot;</span> <span class="string">&quot;<span class="variable">$SOURCES</span>&quot;</span></span><br><span class="line">    PACKAGES=<span class="string">&quot;<span class="variable">$ARCHIVE_BASE</span>/archive/<span class="variable">$suite</span>/main/binary-%ARCH%/Packages.gz&quot;</span></span><br><span class="line">    trigger_wb_update <span class="string">&quot;<span class="variable">$suite</span>&quot;</span> <span class="string">&quot;<span class="variable">$ARCHES</span>&quot;</span> <span class="string">&quot;<span class="variable">$SOURCES</span>&quot;</span> <span class="string">&quot;<span class="variable">$PACKAGES</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>命令都需要在 <code>wbadm</code> 用户下来运行，否则会有权限问题</p><ol><li>添加完软件包后，就可以来看软件包的情况了</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wanna-build --list all --<span class="built_in">arch</span> riscv64 -d oracular</span><br></pre></td></tr></table></figure><p>这会打印出 <code>oracular</code> 仓库下所有软件包的信息。 其中 list 的状态有以下几种，可以根据具状态来筛选不同的软件包 <code>Auto-Not-For-Us</code>,<code>BD-Uninstallable</code>,<code>Build-Attempted</code>,<code>Building</code>,<code>Built</code>,<code>Installed</code>.</p><ol start="2"><li>设置软件包的状态，比如说某个失败的软件包，我修改后想要重新 build ，目前我暂未找到更好的方案，现在是直接修改数据库</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql -d wannadb -U wbadm</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> packages <span class="keyword">SET</span> state<span class="operator">=</span><span class="string">&#x27;Needs-Build&#x27;</span> <span class="keyword">WHERE</span> distribution<span class="operator">=</span><span class="string">&#x27;oracular&#x27;</span> <span class="keyword">AND</span> architecture<span class="operator">=</span><span class="string">&#x27;riscv64&#x27;</span> <span class="keyword">AND</span> state<span class="operator">=</span><span class="string">&#x27;BD-Uninstallable&#x27;</span></span><br></pre></td></tr></table></figure><p>这一条就是将所有依赖问题导致失败的软件包重新设置为需要 build ，然后 wanna build 就会给 buildd 下发 build 任务，让这些软件包再次构建。</p><h2 id="buildd"><a href="#buildd" class="headerlink" title="buildd"></a>buildd</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install sbuild buildd sudo schroot debootstrap</span><br></pre></td></tr></table></figure><h3 id="设置-sbuild-和-schroot"><a href="#设置-sbuild-和-schroot" class="headerlink" title="设置 sbuild 和 schroot"></a>设置 sbuild 和 schroot</h3><p>sbuild 和 schroot 的资料有很多，这边就不赘述。</p><h3 id="配置-buildd"><a href="#配置-buildd" class="headerlink" title="配置 buildd"></a>配置 buildd</h3><ol><li>添加 buildd 用户，在 sbuild 组下</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -a -G sbuild buildd</span><br></pre></td></tr></table></figure><ol start="2"><li>修改配置 buildd 配置文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/buildd/buildd.conf</span><br></pre></td></tr></table></figure><p>以下是我在用的的 buildd conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># build 架构</span><br><span class="line">$build_arch =&#x27;riscv64&#x27;;</span><br><span class="line"></span><br><span class="line"># 仓库信息</span><br><span class="line">$distributions = [</span><br><span class="line">&#123;</span><br><span class="line">        # 指定定支持的发行版，和 `distribution` 保持一致</span><br><span class="line">        dist_name =&gt; [&#x27;oracular&#x27;],</span><br><span class="line">        # build 架构</span><br><span class="line">        built_architecture =&gt; $build_arch ,</span><br><span class="line">        # wanna build 服务器 ip</span><br><span class="line">        wanna_build_ssh_host =&gt; &quot;xxx.xxx.xxx.xx&quot;,</span><br><span class="line">        # wanna build 服务器 ssh 用户名和数据库用户名，这些不用修改</span><br><span class="line">        wanna_build_ssh_user =&gt; &quot;buildd&quot;,</span><br><span class="line">        wanna_build_db_user =&gt; &quot;wbadm&quot;,</span><br><span class="line">        # dupload 配置</span><br><span class="line">        dupload_local_queue_dir =&gt; &quot;upload&quot;,</span><br><span class="line">        logs_mailed_to =&gt; $admin_mail,</span><br><span class="line">        # 使用构建的 chroot ,这个请指定上一步创建的 chroot</span><br><span class="line">        sbuild_chroot =&gt; &#x27;xxxx_chroot&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"># 本机架构</span><br><span class="line">$host_arch = &#x27;x86&#x27;;</span><br><span class="line"></span><br><span class="line"># 日志配置</span><br><span class="line">$daemon_log_file = &#x27;/var/log/buildd.log&#x27;;</span><br><span class="line">$idle_sleep_time = 300;</span><br><span class="line">$verbose = 16;</span><br><span class="line">$admin_mail = &#x27;root&#x27;;</span><br><span class="line">$log_queued_messages = 1;</span><br><span class="line"></span><br><span class="line"># 相关命令路径</span><br><span class="line">$apt_get = &#x27;apt-get&#x27;;</span><br><span class="line">$mailprog = &#x27;/usr/sbin/sendmail&#x27;;</span><br><span class="line">$ssh = &#x27;ssh&#x27;;</span><br><span class="line">$sudo = &#x27;sudo&#x27;;</span><br><span class="line"></span><br><span class="line"># 上传队列</span><br><span class="line">$upload_queues = [</span><br><span class="line">        &#123;</span><br><span class="line">                dupload_local_queue_dir =&gt; &quot;upload&quot;,</span><br><span class="line">                dupload_archive_name =&gt; &quot;anonymous-ftp-master&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>以上只是我的 buildd 配置，不一定是最优解。</p><ol start="3"><li>配置 ssh<br>可以看到，在上面我们是通过 ssh 连接到 wanna build 服务器的，所以我们需要给 buildd 配置一套 ssh key ，并把公钥添加到 wanna build 服务器中.</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译机</span></span><br><span class="line">su - buildd</span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wanna build 机</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/buildd/.ssh/</span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt; authorized_keys</span><br></pre></td></tr></table></figure><ol start="4"><li>创建 log 文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编译机</span></span><br><span class="line"><span class="built_in">touch</span> /var/log/buildd.log</span><br><span class="line"><span class="built_in">chown</span> buildd:buildd /var/log/buildd.log</span><br></pre></td></tr></table></figure><ol start="5"><li>然后就可以愉快的运行 buildd 了</li></ol><p>吗？</p><p>如果你跟着 wiki 走，这时候就是直接运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/buildd start</span><br></pre></td></tr></table></figure><p>然后就会运行失败，为什么呢？ 因为现在已经跑者一个 buildd 了。 debian 在安装 buildd 的时候就已经默认运行了，所以我们需要先手动 kill 掉正在运行的 buildd,然后在重新 start 运行。但是我更喜欢用 systemctl 来管理 buildd 的状态，所以 kill 之后我会通过 <code>systemctl start buildd.service</code> 来运行 buildd.</p><p>之后就能顺利运行 buildd 啦，现在这一套系统就完美的跑在你的服务器上了。如果有什么有的建议和方案请与我交流。</p><h2 id="一些小问题"><a href="#一些小问题" class="headerlink" title="一些小问题"></a>一些小问题</h2><ol><li>buildd 接收任务后打包完成的 deb 包并不会上传到 wanna build 服务器中，以至于我需要手动拷贝。</li><li>批量修改状态不够优雅，需要在研究下 wanna build 命令，看看有没有批量修改的工具。</li></ol><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><ol><li><a href="https://wiki.debian.org/SetupBuildServiceForWanna-build">SetupBuildServiceForWanna-build</a></li><li><a href="https://wiki.debian.org/DebianWannaBuildInfrastructureOnOneServer">DebianWannaBuildInfrastructureOnOneServer</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum 不完全使用指南</title>
      <link href="/2023/04/12/yum-%E4%B8%8D%E5%AE%8C%E5%85%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2023/04/12/yum-%E4%B8%8D%E5%AE%8C%E5%85%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="yum-查询某个子包存在的软件包"><a href="#yum-查询某个子包存在的软件包" class="headerlink" title="yum 查询某个子包存在的软件包"></a>yum 查询某个子包存在的软件包</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum <span class="built_in">info</span> xxx</span><br></pre></td></tr></table></figure><p>例如:</p><p>查询 <code>qt5-rpm-macros</code></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[eastdong@openeuler-riscv64 ~]$ yum info qt5-rpm-macros</span><br><span class="line">Last metadata expiration check: <span class="number">0</span>:<span class="number">03</span>:<span class="number">57</span> ago on Wed <span class="number">12</span> Apr <span class="number">2023</span> <span class="number">02</span>:<span class="number">20</span>:<span class="number">49</span> PM +<span class="number">08</span>.</span><br><span class="line">Available Packages</span><br><span class="line">Name         : <span class="type">qt5</span>-rpm-macros</span><br><span class="line">Version      : 5.15.2</span><br><span class="line">Release      : 1.<span class="type">oe2303</span></span><br><span class="line">Architecture : <span class="type">noarch</span></span><br><span class="line">Size         : 9.9 <span class="type">k</span></span><br><span class="line">Source       : <span class="type">qt5</span>-<span class="number">5.15</span>.<span class="number">2</span>-<span class="number">1</span>.oe2303.src.rpm</span><br><span class="line">Repository   : <span class="type">mainline</span></span><br><span class="line">Summary      : <span class="type">RPM</span> macros <span class="keyword">for</span> building Qt5 <span class="keyword">and</span> KDE Frameworks <span class="number">5</span> packages</span><br><span class="line">URL          : <span class="type">https</span>://getfedora.org/</span><br><span class="line">License      : <span class="type">GPLv3</span></span><br><span class="line">Description  : <span class="type">RPM</span> provides a rich set <span class="keyword">of</span> macros to make <span class="keyword">package</span> <span class="title">maintenance simpler and cons</span>istent across packages.</span><br></pre></td></tr></table></figure><p>Source 的内容就是主包。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>给 VisonFive 安装 ArchLinux</title>
      <link href="/2022/09/13/VisionFive-Replace-rootfs-with-ArchLinux-RISCV/"/>
      <url>/2022/09/13/VisionFive-Replace-rootfs-with-ArchLinux-RISCV/</url>
      
        <content type="html"><![CDATA[<h2 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h2><p><img src="/2022/09/13/VisionFive-Replace-rootfs-with-ArchLinux-RISCV/1.jpg"><br>风扇是淘宝买的，关键词是： 芯片  南桥北桥  风扇4cm<br><img src="/2022/09/13/VisionFive-Replace-rootfs-with-ArchLinux-RISCV/2.jpg"></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>micro-SD card ( &gt; 16G) &amp; 读卡器</li><li>usb 转 UART 模块</li><li>usb tpye-c 供电线</li></ol><p><em>PS:</em> usb 串口模块接串口的时候，需 <strong>板子上的 RX 接电脑的 TX</strong>.</p><h2 id="按照官方手册下载-Fedora-镜像并且写入-sd-卡"><a href="#按照官方手册下载-Fedora-镜像并且写入-sd-卡" class="headerlink" title="按照官方手册下载 Fedora 镜像并且写入 sd 卡"></a>按照官方手册下载 Fedora 镜像并且写入 sd 卡</h2><p>手册链接: <a href="https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjn-8Ss8pD6AhWG-2EKHYzmCHEQFnoECAkQAQ&url=https://starfivetech.com/uploads/VisionFive%2520Single%2520Board%2520Computer%2520Quick%2520Start%2520Guide.pdf&usg=AOvVaw0LhpUFxlCjfywrGSvSO-Mt">VisionFive SBC Quick Start Guide</a></p><p>镜像地址: <a href="https://github.com/starfive-tech/Fedora_on_StarFive">https://github.com/starfive-tech/Fedora_on_StarFive</a></p><p>下载后得到<code>Fedora-riscv64-jh7100-developer-xfce-Rawhide-20211226-214100.n.0-sda.raw.zst</code></p><p>使用<code>zstd -d Fedora-riscv64-jh7100-developer-xfce-Rawhide-20211226-214100.n.0-sda.raw.zst</code> 解压得到<code>Fedora-riscv64-jh7100-developer-xfce-Rawhide-20211226-214100.n.0-sda.raw</code></p><p>将 sd 卡插入电脑，并将镜像文件写入 sd 卡。（此过程耗时较久）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以使用 fdisk 等软件来确认sd卡的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 注意替换 of 中的 /dev/sdX</span></span><br><span class="line">sudo <span class="built_in">dd</span> <span class="keyword">if</span>=Fedora-riscv64-jh7100-developer-xfce-Rawhide-20211226-214100.n.0-sda.raw of=/dev/sdX bs=8M status=progress &amp;&amp; <span class="built_in">sync</span></span><br><span class="line"></span><br><span class="line">13589544960 bytes (14 GB, 13 GiB) copied, 1201 s, 11.3 MB/s</span><br><span class="line">1620+0 records <span class="keyword">in</span></span><br><span class="line">1620+0 records out</span><br><span class="line">13589544960 bytes (14 GB, 13 GiB) copied, 1424.52 s, 9.5 MB/s</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="替换-rootfs"><a href="#替换-rootfs" class="headerlink" title="替换 rootfs"></a>替换 rootfs</h2><ol><li><p>挂载 sd 卡的内容到<code>/mnt</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此处以 /dev/sda4 为例子</span></span><br><span class="line">sudo mount /dev/sda4 /mnt</span><br></pre></td></tr></table></figure></li><li><p>在<code>mnt</code>下创建<code>old</code> <code>new</code>两个目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mnt</span><br><span class="line">sudo <span class="built_in">mkdir</span> new old</span><br></pre></td></tr></table></figure></li><li><p>下载 <a href="https://archriscv.felixc.at/images/archriscv-20220727.tar.zst"><code>archriscv-20220727.tar.zst</code></a>,并解压到<code>new</code>目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> new</span><br><span class="line">sudo bsdtar -xvf archriscv-20220727.tar.zst</span><br></pre></td></tr></table></figure></li><li><p>启动 Fedora Linux RISC-V 虚拟机</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 看到设备以及从 本机（East）,变为 fedora 了</span></span><br><span class="line">[eastdong@East ~]$ sudo systemd-nspawn -D /mnt/ --machine fedora -a -U</span><br><span class="line">Spawning container fedora on /mnt.</span><br><span class="line">Press ^] three <span class="built_in">times</span> within 1s to <span class="built_in">kill</span> container.</span><br><span class="line">Selected user namespace base 277413888 and range 65536.</span><br><span class="line">[root@fedora ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>开始更换 rootfs</p><ol><li><p>记住一些路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/new/lib/    <span class="comment"># 后面步骤中会设置为 LD_LIBRARY_PATH</span></span><br><span class="line">/new/lib/ld-linux-riscv64-lp64d.so.1</span><br></pre></td></tr></table></figure></li><li><p>移动文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> etc home media mnt opt root srv var old/ <span class="comment"># 保留 boot</span></span><br><span class="line"><span class="built_in">mv</span> new/etc new/home new/mnt new/opt new/root new/srv new/var ./</span><br></pre></td></tr></table></figure></li><li><p>继续移动文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LD_LIBRARY_PATH=/new/lib/ /new/lib/ld-linux-riscv64-lp64d.so.1 /new/bin/mv bin sbin usr lib old/</span><br><span class="line">LD_LIBRARY_PATH=/new/lib/ /new/lib/ld-linux-riscv64-lp64d.so.1 /new/bin/mv new/bin new/sbin new/usr new/lib ./</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> old/lib/firmware ./lib/</span><br></pre></td></tr></table></figure></li><li><p>移动<code>kernel modules</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> old/usr/lib/modules/ ./lib/</span><br></pre></td></tr></table></figure></li><li><p>复制<code>fstab</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> /old/etc/fstab ./etc/</span><br></pre></td></tr></table></figure></li></ol></li><li><p>退出登陆，再次开始虚拟机的时候系统就变成 archlinux 了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@fedora ~] <span class="built_in">uname</span> -a</span><br><span class="line">Linux fedora 5.19.7-arch1-1 <span class="comment">#1 SMP PREEMPT_DYNAMIC Mon, 05 Sep 2022 18:09:09 +0000 riscv64 GNU/Linux</span></span><br></pre></td></tr></table></figure></li><li><p>下载一些常用软件，并更新数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -Syyu</span><br><span class="line">pacman -S bash-completion vim <span class="comment"># wpa_supplicant</span></span><br></pre></td></tr></table></figure></li><li><p>取消挂载，将 sd 卡插入板子。更换 archriscv 后的用户名<code>root</code>,密码<code>sifive</code> 。</p></li><li><p>连接串口，使用<code>sudo picocom -b 115200 /dev/ttyUSB0</code>连接串口查看板子情况。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line">Linux fedora-starfive 5.15.10+ <span class="comment">#1 SMP Fri Dec 24 14:24:27 CST 2021 riscv64 GNU/Linux</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h2><ol><li><p>这边使用的是<code>systemd-network</code>来进行有线连接。</p></li><li><p>使用<code>ip a</code>查看网口信息。</p></li><li><p>编译<code>/etc/systemd/network/default.network</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Match]</span><br><span class="line">Name=eth* <span class="comment">#我这边有线的命名是 eth0</span></span><br><span class="line"></span><br><span class="line">[Network]</span><br><span class="line">DHCP=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure></li><li><p>重新加载网络,此时网络应该已经成功连接。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart systemd-netwokd</span><br></pre></td></tr></table></figure></li><li><p>测试一下网络</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ping 8.8.8.8</span><br><span class="line"></span><br><span class="line">PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.</span><br><span class="line">64 bytes from 8.8.8.8: icmp_seq=1 ttl=120 time=34.6 ms</span><br><span class="line">64 bytes from 8.8.8.8: icmp_seq=2 ttl=120 time=34.2 ms</span><br><span class="line">64 bytes from 8.8.8.8: icmp_seq=3 ttl=120 time=34.2 ms</span><br><span class="line">64 bytes from 8.8.8.8: icmp_seq=4 ttl=120 time=35.8 ms</span><br><span class="line">64 bytes from 8.8.8.8: icmp_seq=5 ttl=120 time=35.2 ms</span><br><span class="line"></span><br><span class="line">--- 8.8.8.8 ping statistics ---</span><br><span class="line">5 packets transmitted, 5 received, 0% packet loss, time 4006ms</span><br><span class="line">rtt min/avg/max/mdev = 34.240/34.827/35.849/0.621 ms</span><br></pre></td></tr></table></figure></li><li><p>开机自动连网络</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> systemd-netwokd</span><br></pre></td></tr></table></figure></li><li><p>同步时间</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start systemd-timesyncd</span><br></pre></td></tr></table></figure><p>后面就可以愉快的玩耍啦</p></li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>本次替换使用的 host 是 ArchLinux , 有些命令并不适用所有操作系统。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><ol><li><a href="https://github.com/felixonmars/archriscv-packages/wiki/RV64-%E6%9D%BF%E5%AD%90%E6%9B%B4%E6%8D%A2-rootfs-%E6%8C%87%E5%8D%97">RV64 板子更换 rootfs 指南</a></li><li><a href="https://github.com/felixonmars/archriscv-packages/wiki/%E5%93%AA%E5%90%92-D1-%E9%80%9A%E8%BF%87-TF-%E5%8D%A1%E8%BF%90%E8%A1%8C-Arch-Linux-RISC-V-rootfs#%E6%9B%BF%E6%8D%A2-arch-linux--risc-v-rootfs">哪吒 D1 通过 TF 卡运行 Arch Linux RISC V rootfs</a></li><li><a href="https://starfivetech.com/uploads/VisionFive%20Single%20Board%20Computer%20Quick%20Start%20Guide.pdf">VisionFive SBC Quick Start Guide</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> RISC-V </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RISC-V </tag>
            
            <tag> AarchLinux </tag>
            
            <tag> VisionFive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与 firefox 的爱恨情仇</title>
      <link href="/2022/08/29/love-and-hatred-with-firefox/"/>
      <url>/2022/08/29/love-and-hatred-with-firefox/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>firefox 102 build 的时候会报错找不到 <code>intersection</code> 方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">101:24.74 error[E0599]: no method named `intersection` found <span class="keyword">for</span> struct `FeatureFlags` <span class="keyword">in</span> the current scope</span><br><span class="line">101:24.74    --&gt; servo/components/style/queries/feature.rs:126:14</span><br><span class="line">101:24.74     |</span><br><span class="line">101:24.74 103 | / bitflags! &#123;</span><br><span class="line">101:24.74 104 | |     /// Different flags or toggles that change how a expression is parsed or</span><br><span class="line">101:24.74 105 | |     /// evaluated.</span><br><span class="line">101:24.74 106 | |     <span class="comment">#[derive(ToShmem)]</span></span><br><span class="line">101:24.74 ...   |</span><br><span class="line">101:24.74 120 | |     &#125;</span><br><span class="line">101:24.74 121 | | &#125;</span><br><span class="line">101:24.74     | |_- method `intersection` not found <span class="keyword">for</span> this</span><br><span class="line">101:24.74 ...</span><br><span class="line">101:24.74 126 |           self.intersection(Self::CHROME_AND_UA_ONLY | Self::WEBKIT_PREFIX)</span><br><span class="line">101:24.74     |                ^^^^^^^^^^^^ <span class="built_in">help</span>: there is an associated <span class="keyword">function</span> with a similar name: `intersects`</span><br><span class="line">101:24.79 error[E0599]: no method named `intersection` found <span class="keyword">for</span> struct `FeatureFlags` <span class="keyword">in</span> the current scope</span><br><span class="line">101:24.79    --&gt; servo/components/style/queries/feature.rs:139:14</span><br><span class="line">101:24.79     |</span><br><span class="line">101:24.79 103 | / bitflags! &#123;</span><br><span class="line">101:24.79 104 | |     /// Different flags or toggles that change how a expression is parsed or</span><br><span class="line">101:24.79 105 | |     /// evaluated.</span><br><span class="line">101:24.79 106 | |     <span class="comment">#[derive(ToShmem)]</span></span><br><span class="line">101:24.79 ...   |</span><br><span class="line">101:24.79 120 | |     &#125;</span><br><span class="line">101:24.79 121 | | &#125;</span><br><span class="line">101:24.79     | |_- method `intersection` not found <span class="keyword">for</span> this</span><br><span class="line">101:24.79 ...</span><br><span class="line">101:24.79 139 |           self.intersection(Self::all_container_axes())</span><br><span class="line">101:24.79     |                ^^^^^^^^^^^^ <span class="built_in">help</span>: there is an associated <span class="keyword">function</span> with a similar name: `intersects`</span><br><span class="line">102:23.55 For more information about this error, try `rustc --explain E0599`.</span><br></pre></td></tr></table></figure><p>报错的是<code>servo/components/style/queries/feature.rs</code>中的<a href="https://github.com/makotokato/gecko-dev/blob/riscv64/servo/components/style/queries/feature.rs#L103">代码</a></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bitflags!</span> &#123;</span><br><span class="line">    <span class="comment">/// Different flags or toggles that change how a expression is parsed or</span></span><br><span class="line">    <span class="comment">/// evaluated.</span></span><br><span class="line">    <span class="meta">#[derive(ToShmem)]</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">FeatureFlags</span> : <span class="type">u8</span> &#123;</span><br><span class="line">        <span class="comment">/// The feature should only be parsed in chrome and ua sheets.</span></span><br><span class="line">        <span class="keyword">const</span> CHROME_AND_UA_ONLY = <span class="number">1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/// The feature requires a -webkit- prefix.</span></span><br><span class="line">        <span class="keyword">const</span> WEBKIT_PREFIX = <span class="number">1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/// The feature requires the inline-axis containment.</span></span><br><span class="line">        <span class="keyword">const</span> CONTAINER_REQUIRES_INLINE_AXIS = <span class="number">1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line">        <span class="comment">/// The feature requires the block-axis containment.</span></span><br><span class="line">        <span class="keyword">const</span> CONTAINER_REQUIRES_BLOCK_AXIS = <span class="number">1</span> &lt;&lt; <span class="number">3</span>;</span><br><span class="line">        <span class="comment">/// The feature requires containment in the physical width axis.</span></span><br><span class="line">        <span class="keyword">const</span> CONTAINER_REQUIRES_WIDTH_AXIS = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line">        <span class="comment">/// The feature requires containment in the physical height axis.</span></span><br><span class="line">        <span class="keyword">const</span> CONTAINER_REQUIRES_HEIGHT_AXIS = <span class="number">1</span> &lt;&lt; <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">FeatureFlags</span> &#123;</span><br><span class="line">    <span class="comment">/// Returns parsing requirement flags.</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">parsing_requirements</span>(<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="title function_ invoke__">intersection</span>(<span class="keyword">Self</span>::CHROME_AND_UA_ONLY | <span class="keyword">Self</span>::WEBKIT_PREFIX)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Returns all the container axis flags.</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">all_container_axes</span>() <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">Self</span>::CONTAINER_REQUIRES_INLINE_AXIS |</span><br><span class="line">            <span class="keyword">Self</span>::CONTAINER_REQUIRES_BLOCK_AXIS |</span><br><span class="line">            <span class="keyword">Self</span>::CONTAINER_REQUIRES_WIDTH_AXIS |</span><br><span class="line">            <span class="keyword">Self</span>::CONTAINER_REQUIRES_HEIGHT_AXIS</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Returns our subset of container axis flags.</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">container_axes</span>(<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="title function_ invoke__">intersection</span>(<span class="keyword">Self</span>::<span class="title function_ invoke__">all_container_axes</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面提供 <code>intersection</code> 方法的宏是 <code>bitflags</code>，在正常情况下该宏展开是有 <code>intersection</code>的，故猜测可能是 rust 稍微有点不对劲。</p><h3 id="折腾-cargo-expand"><a href="#折腾-cargo-expand" class="headerlink" title="折腾 cargo expand"></a>折腾 cargo expand</h3><p>进行到这，想采用 <code>cargo expand</code> 工具来尝试展开宏，看看是宏展开有问题，还是其他的问题。<br>运行 <code>cargo expand</code>，提示错误:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="built_in">expand</span> --lib main</span><br><span class="line">ERROR: cannot <span class="built_in">expand</span> single item (main) without rustfmt.</span><br><span class="line">Install rustfmt by running `rustup component add rustfmt --toolchain nightly`.</span><br></pre></td></tr></table></figure><p>查询 <code>rustfmt</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pacman -F rustfmt</span><br><span class="line">extra/rust 1:1.62.0-1 [installed]</span><br><span class="line">    usr/bin/rustfmt</span><br><span class="line">community/rustup 1.25.1-1</span><br><span class="line">    usr/bin/rustfmt</span><br></pre></td></tr></table></figure><p><code>rust</code> 里面是有<code>rustfmt</code>, 为啥<code>cargo expand</code>还需要通过 <code>rustup</code> 来装 <code>rustfmt</code>? 我不理解。同时感谢 c10s 发的 issus <a href="https://github.com/dtolnay/cargo-expand/issues/158">Can’t use with rustfmt installed not by rustup</a>，虽然被光速关闭。</p><p><strong>感谢乔老师：</strong> 乔老师 revert 了之前的 tootoolchain_find 的 patch,使得 cargo expand 能够使用 rust 的 rustfmt.</p><p>然后发现 cargo expand 是在自己代码里面找 nightly toolchain 调用的，然而目前各大发行版打的 rust 都是正式版的。根本没有 nightly 的 rust。</p><p>该方法暂时卡住。</p><h2 id="被点醒"><a href="#被点醒" class="headerlink" title="被点醒"></a>被点醒</h2><p><img src="/2022/08/29/love-and-hatred-with-firefox/1.jpg" alt="图片加载失败"><br><img src="/2022/08/29/love-and-hatred-with-firefox/1.2.1.jpg" alt="图片加载失败"></p><p>感谢大佬发现了我之前没发现的华点。</p><h2 id="这个-patch-怎么这么大"><a href="#这个-patch-怎么这么大" class="headerlink" title="这个 patch 怎么这么大"></a>这个 patch 怎么这么大</h2><p>发现 <code>bitflags</code>产生的问题后，就开始解决。顺便跟着 <code>makotokato</code>新的 pr 来更新一下旧版的 patch。</p><p>诶，更新了 <code>midir</code>， 更一下，更一下。<code>patch</code> 达到了惊人了 2G。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[eastdong@East Downloads]$ <span class="built_in">ls</span> -l makotokato-riscv64-support-and-zenithal-backported.patch</span><br><span class="line">-rw-r--r-- 1 eastdong eastdong 238161059 Aug 28 15:56 makotokato-riscv64-support-and-zenithal-backported.patch</span><br></pre></td></tr></table></figure><p>这么大，不太对劲。看看这个 commit, <a href="https://github.com/makotokato/gecko-dev/commit/74611bdf22b13f4f7ffc34a4f44b46dffe841d47"><code>./mach vendor rust</code></a> , 更新了很多库文件。</p><p>查看 firefox 文档，发现可以使用 <code>./mach vendor </code> 来更新库文件。这条命令会读取在 Cargo.lock 中写的软件版本，从网络上下载库。同时还会检查目录下依赖版本的冲突情况，自动替换为合适的依赖版本。</p><h2 id="mach-vendor-rust"><a href="#mach-vendor-rust" class="headerlink" title="./mach vendor rust"></a><code>./mach vendor rust</code></h2><h3 id="初次使用"><a href="#初次使用" class="headerlink" title="初次使用"></a>初次使用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">The details of the failure are as follows:</span><br><span class="line"></span><br><span class="line">mozversioncontrol.InvalidRepoPath: Unknown VCS, or not a <span class="built_in">source</span> checkout: /build/firefox/src/firefox-104.0.1</span><br><span class="line"></span><br><span class="line">  File <span class="string">&quot;/build/firefox/src/firefox-104.0.1/python/mozbuild/mozbuild/vendor/mach_commands.py&quot;</span>, line 200, <span class="keyword">in</span> vendor_rust</span><br><span class="line">    ok = vendor_command.vendor(**kwargs)</span><br><span class="line">  File <span class="string">&quot;/build/firefox/src/firefox-104.0.1/python/mozbuild/mozbuild/vendor/vendor_rust.py&quot;</span>, line 596, <span class="keyword">in</span> vendor</span><br><span class="line">    <span class="keyword">if</span> not ignore_modified and self.has_modified_files():</span><br><span class="line">  File <span class="string">&quot;/build/firefox/src/firefox-104.0.1/python/mozbuild/mozbuild/vendor/vendor_rust.py&quot;</span>, line 198, <span class="keyword">in</span> has_modified_files</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> self.repository.get_changed_files(<span class="string">&quot;M&quot;</span>)</span><br><span class="line">  File <span class="string">&quot;/build/firefox/src/firefox-104.0.1/python/mozbuild/mozbuild/util.py&quot;</span>, line 1081, <span class="keyword">in</span> __get__</span><br><span class="line">    setattr(instance, name, self.func(instance))</span><br><span class="line">  File <span class="string">&quot;/build/firefox/src/firefox-104.0.1/python/mozbuild/mozbuild/base.py&quot;</span>, line 445, <span class="keyword">in</span> repository</span><br><span class="line">    <span class="built_in">return</span> get_repository_object(self.topsrcdir)</span><br><span class="line">  File <span class="string">&quot;/build/firefox/src/firefox-104.0.1/python/mozversioncontrol/mozversioncontrol/__init__.py&quot;</span>, line 700, <span class="keyword">in</span> get_repository_object</span><br><span class="line">    raise InvalidRepoPath(f<span class="string">&quot;Unknown VCS, or not a source checkout: &#123;path&#125;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>./mach vendor rust</code> 会通过读取 VCS 来判断是否在开发环境。但是可以使用 <code>--ignore-modified</code> 来跳过检查。</p><p>经过测试，在在 git 仓库里跑 <code>mach vendor rust</code> 是可以运行的</p><h3 id="mach-vendor-rust-ignore-modified"><a href="#mach-vendor-rust-ignore-modified" class="headerlink" title="./mach vendor rust --ignore-modified"></a><code>./mach vendor rust --ignore-modified</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$./mach vendor rust --ignore-modified</span><br><span class="line"></span><br><span class="line">error: no such subcommand: `vet`</span><br><span class="line"></span><br><span class="line">        Did you mean `<span class="built_in">fmt</span>`?</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>读一下 <code>vendor rust</code> 的源代码。找到 <a href="https://github.com/mozilla/gecko-dev/blob/master/python/mozbuild/mozbuild/vendor/vendor_rust.py#L761">vet</a> 的定义</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Only emit warnings for cargo-vet for now.</span></span><br><span class="line">env = os.environ.copy()</span><br><span class="line">env[<span class="string">&quot;PATH&quot;</span>] = os.pathsep.join(</span><br><span class="line">    (</span><br><span class="line">        <span class="built_in">str</span>(Path(cargo).parent),</span><br><span class="line">        os.environ[<span class="string">&quot;PATH&quot;</span>],</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">flags = [<span class="string">&quot;--output-format=json&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;MOZ_AUTOMATION&quot;</span> <span class="keyword">in</span> os.environ:</span><br><span class="line">    flags.append(<span class="string">&quot;--locked&quot;</span>)</span><br><span class="line">    flags.append(<span class="string">&quot;--frozen&quot;</span>)</span><br><span class="line">res = cargo_vet(</span><br><span class="line">    self,</span><br><span class="line">    flags,</span><br><span class="line">    stdout=subprocess.PIPE,</span><br><span class="line">    env=env,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> res.returncode:</span><br><span class="line">    vet = json.loads(res.stdout)</span><br><span class="line">    logged_error = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> failure <span class="keyword">in</span> vet.get(<span class="string">&quot;failures&quot;</span>, []):</span><br><span class="line">        failure[<span class="string">&quot;crate&quot;</span>] = failure.pop(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">        self.log(</span><br><span class="line">            logging.ERROR,</span><br><span class="line">            <span class="string">&quot;cargo_vet_failed&quot;</span>,</span><br><span class="line">            failure,</span><br><span class="line">            <span class="string">&quot;Missing audit for &#123;crate&#125;:&#123;version&#125; (requires &#123;missing_criteria&#125;).&quot;</span></span><br><span class="line">            <span class="string">&quot; Run `./mach cargo vet` for more information.&quot;</span>,</span><br><span class="line">        )</span><br><span class="line">        logged_error = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> This could log more information, but the violation JSON</span></span><br><span class="line">    <span class="comment"># output isn&#x27;t super stable yet, so it&#x27;s probably simpler to tell</span></span><br><span class="line">    <span class="comment"># the caller to run `./mach cargo vet` directly.</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> vet.get(<span class="string">&quot;violations&quot;</span>, &#123;&#125;).keys():</span><br><span class="line">        self.log(</span><br><span class="line">            logging.ERROR,</span><br><span class="line">            <span class="string">&quot;cargo_vet_failed&quot;</span>,</span><br><span class="line">            &#123;<span class="string">&quot;key&quot;</span>: key&#125;,</span><br><span class="line">            <span class="string">&quot;Violation conflict for &#123;key&#125;. Run `./mach cargo vet` for more information.&quot;</span>,</span><br><span class="line">        )</span><br><span class="line">        logged_error = <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看到 <code>vet</code> 是其实是将 <code>res</code> 的 <code>stdout</code> 编码为 python 对象。</p><p><code>res = cargo_vet()</code> ,阅读前面的代码 <code>from mozbuild.mach_commands import cargo_vet</code>确定 cargo_vet 是由 mach_commands 引入的。</p><p>根据 <a href="https://github.com/mozilla/gecko-dev/blob/master/python/mozbuild/mozbuild/mach_commands.py#L204"><code>mach_commands.py</code></a>中的代码。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cargo_vet</span>(<span class="params">command_context, arguments, stdout=<span class="literal">None</span>, env=os.environ</span>):</span><br><span class="line">    <span class="keyword">from</span> mozbuild.bootstrap <span class="keyword">import</span> bootstrap_toolchain</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Logging of commands enables logging from `bootstrap_toolchain` that we</span></span><br><span class="line">    <span class="comment"># don&#x27;t want to expose. Disable them temporarily.</span></span><br><span class="line">    logger = logging.getLogger(<span class="string">&quot;gecko_taskgraph.generator&quot;</span>)</span><br><span class="line">    level = logger.getEffectiveLevel()</span><br><span class="line">    logger.setLevel(logging.ERROR)</span><br><span class="line"></span><br><span class="line">    env = env.copy()</span><br><span class="line">    cargo_vet = bootstrap_toolchain(<span class="string">&quot;cargo-vet&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> cargo_vet:</span><br><span class="line">        env[<span class="string">&quot;PATH&quot;</span>] = os.pathsep.join([cargo_vet, env[<span class="string">&quot;PATH&quot;</span>]])</span><br><span class="line">    logger.setLevel(level)</span><br></pre></td></tr></table></figure><p>可以简单的理解为通过 <code>bootstrap_toolchain</code> 来 build 一个 <code>cargo-vet</code> 并将其加入到 PATH 中。然后就卡住了。</p><p>研究了一下 <code>bootstrap_toolchain</code> 的代码没有找到很好的解决方案。</p><h2 id="更换思路"><a href="#更换思路" class="headerlink" title="更换思路"></a>更换思路</h2><p>既然我们没办法解决找不到 <code>vet</code> ，那我们可以尝试解决调用 <code>vet</code> 的函数。</p><h3 id="mach-vendor-rust-ignore-modified-有-VCS-状态下"><a href="#mach-vendor-rust-ignore-modified-有-VCS-状态下" class="headerlink" title="./mach vendor rust --ignore-modified 有 VCS 状态下"></a><code>./mach vendor rust --ignore-modified</code> 有 VCS 状态下</h3><p>经过测试，在 git 仓库里跑 <code>mach vendoro rust --ignre-modified</code> 没问题。这就是有 vcs 的状态</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>阅读 <code>vendor rust</code> 代码，发现 <code>cargo_vet</code> 的作用是验证第三方库文件是受信任的。</p><p>既然找不到 <code>vet</code> ，那我们可以注释所有和 <code>vet</code> 相关代码，并且返回 <code>True</code> 即可使得编译正常运行。</p><p>感谢 gentoo  小队的大佬提供的解决方案。具体代码在 <a href="https://github.com/gentoo/riscv/blob/master/www-client/firefox/files/firefox-riscv64-hack.patch">https://github.com/gentoo/riscv/blob/master/www-client/firefox/files/firefox-riscv64-hack.patch</a> 。</p>]]></content>
      
      
      <categories>
          
          <category> RISC-V </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RISC-V </tag>
            
            <tag> firefox </tag>
            
            <tag> archlinux </tag>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用工具</title>
      <link href="/2022/05/05/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/05/05/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="parallel"><a href="#parallel" class="headerlink" title="parallel"></a><code>parallel</code></h2><p>好用的批处理工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parallel <span class="built_in">command</span> parameter &#123;&#125;::: text1 text2 ... text*n</span><br></pre></td></tr></table></figure><p><code>parallel</code> 将 command 中的命令执行 n 次，每次赋予 text 中的不同值。</p><p><strong>注意:</strong> <code>parallel</code> 是将每条命令执行多次，如果有判断后写入语句建议先单独执行一次，将内容写入后用 <code>parallel</code> 执行。</p><h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a><code>tmux</code></h2><p>好用</p><h2 id="picocom"><a href="#picocom" class="headerlink" title="picocom"></a><code>picocom</code></h2><p>串口工具</p><p><code>screen</code> 的上位替代，配合 tmux 能够很好的导出 log, 且显示比 <code>screen</code> 舒服很多。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo tag 页面不显示</title>
      <link href="/2022/04/18/hexo-tag-%E9%A1%B5%E9%9D%A2%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
      <url>/2022/04/18/hexo-tag-%E9%A1%B5%E9%9D%A2%E4%B8%8D%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="创建的-tags-写法错误"><a href="#创建的-tags-写法错误" class="headerlink" title="创建的 tags 写法错误"></a>创建的 tags 写法错误</h3><p>删除 tags , categories 文件夹再次添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>在 tags 的 index.md 中添加</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>记得添加在虚线中。</p><h3 id="主题不支持"><a href="#主题不支持" class="headerlink" title="主题不支持"></a>主题不支持</h3><p>更新主题,可能是当前主题不支持显示 tag 页面。更换到有 tag 页面的主题就好。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 使用指北</title>
      <link href="/2022/04/18/git-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/"/>
      <url>/2022/04/18/git-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/</url>
      
        <content type="html"><![CDATA[<h2 id="第一次使用-git-仓库"><a href="#第一次使用-git-仓库" class="headerlink" title="第一次使用 git 仓库"></a>第一次使用 git 仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init(建立本地git仓库)</span><br><span class="line">git add XXX(添加文件到本地git仓库)</span><br><span class="line">git commit -m <span class="string">&quot;XXXX&quot;</span>(添加commit 信息)</span><br><span class="line">git remote add origin git@github.com:name/project.git (添加github仓库)</span><br><span class="line">$ git push -u origin master (提交代码)</span><br></pre></td></tr></table></figure><h2 id="以后提交"><a href="#以后提交" class="headerlink" title="以后提交"></a>以后提交</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add XXX(添加文件到本地git仓库)</span><br><span class="line">git commit -m <span class="string">&quot;XXXX&quot;</span>(添加commit 信息)</span><br><span class="line">git push (提交代码)</span><br></pre></td></tr></table></figure><h2 id="第二仓库"><a href="#第二仓库" class="headerlink" title="第二仓库"></a>第二仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add name xx@xxx.com:name/project.git (添加第二git仓库， name 自定义)</span><br><span class="line">git remote <span class="built_in">rm</span> name (删除仓库)</span><br><span class="line">git push name master (提交指定仓库)</span><br></pre></td></tr></table></figure><h3 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h3><p>从上游获取代码，同步到自己的仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream xxxx</span><br><span class="line">git pull upsterm</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h2 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;name&quot;</span></span><br><span class="line">git config --global user.email email</span><br><span class="line">git config --list //显示所有配置</span><br></pre></td></tr></table></figure><h2 id="git-强制提交"><a href="#git-强制提交" class="headerlink" title="git 强制提交"></a>git 强制提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure><h2 id="删除失效的本地分支"><a href="#删除失效的本地分支" class="headerlink" title="删除失效的本地分支"></a>删除失效的本地分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure><h2 id="git-checkout-b-xxx-yyyy"><a href="#git-checkout-b-xxx-yyyy" class="headerlink" title="git checkout -b xxx yyyy"></a>git checkout -b xxx yyyy</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>根据特定版本的分支创建新分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b newbreach1 origin/master  <span class="comment">#根据 origin/master 创建新分支，同时也可以通过 `upstream`, `commit`， `tag` 创建分支</span></span><br></pre></td></tr></table></figure><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>需要在添加 <a href="#%E7%AC%AC%E4%BA%8C%E4%BB%93%E5%BA%93"><code>upstream</code></a> 的前提下使用。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><code>git switch</code> 切换到需要 <code>rebase</code> 的分支。</li><li><code>git fetch upstream</code> 将 <code>upstream</code> 的最新分支拉到本地。</li><li><code>git rebase upstream/master</code> rebase分支。(这时候分支已经干净了)</li><li><code>git push -f </code> 提交分支。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>warframe linux 玩耍+本地化</title>
      <link href="/2020/07/21/warframe/"/>
      <url>/2020/07/21/warframe/</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>waframe 本身是不支持 linux 的, 我们可以通过<a href="https://lutris.net/">lutris</a>来下载并使用 wine 玩耍。</p><p>下载就先不说了 有需要在更新</p><h2 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h2><p>因为 lutris 下载后的默认语言是 En，然后本人英语又巨差，目前市面上也没有很好的本地化方法，故写一下咯。</p><p>Lutris 下载的游戏一般会在 Home 目录下新建一个 Games 的文件夹。</p><p>于是 waframe 的路径就是<code>/home/Games/warframe/drive_c/Program Files/Warframe</code></p><p>我们打开 <code>updater.sh </code>文件拉到最下方</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run warframe internal updater</span></span><br><span class="line"><span class="string">&quot;<span class="variable">$WINE</span>&quot;</span> cmd /C <span class="string">&quot;<span class="variable">$WINPATH</span>&quot;</span> -silent -<span class="built_in">log</span>:/Preprocessing.<span class="built_in">log</span> -dx10:1 -dx11:1 -threadedworker:1 -cluster:public -language:zh -applet:/EE/Types/Framework/ContentUpdate</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################</span></span><br><span class="line"><span class="comment"># cache optimization</span></span><br><span class="line"><span class="comment">#############################################################</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$do_cache</span>&quot;</span> = <span class="literal">true</span> ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;*********************&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Optimizing Cache.&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;*********************&quot;</span></span><br><span class="line"><span class="string">&quot;<span class="variable">$WINE</span>&quot;</span> cmd /C <span class="string">&quot;<span class="variable">$WINPATH</span>&quot;</span>  -silent -<span class="built_in">log</span>:/Preprocessing.<span class="built_in">log</span> -dx10:1 -dx11:1 -threadedworker:1 -cluster:public -language:zh -applet:/EE/Types/Framework/CacheDefraggerAsync /Tools/CachePlan.txt</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################</span></span><br><span class="line"><span class="comment"># actually start the game</span></span><br><span class="line"><span class="comment">#############################################################</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$start_game</span>&quot;</span> = <span class="literal">true</span> ] ; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;*********************&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Launching Warframe.&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;*********************&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;<span class="variable">$WINE</span>&quot;</span> cmd /C start /b <span class="string">&quot;&quot;</span> <span class="string">&quot;<span class="variable">$WINPATH</span>&quot;</span> -<span class="built_in">log</span>:/Preprocessing.<span class="built_in">log</span> -dx10:1 -dx11:1 -threadedworker:1 -cluster:public -language:zh</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>直接把三个 <code>public -language:</code>后面的参数改成 zh 就好了。<br>前提是你语言有选中文编码。</p>]]></content>
      
      
      
        <tags>
            
            <tag> game </tag>
            
            <tag> warframe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2020/07/21/text/"/>
      <url>/2020/07/21/text/</url>
      
        <content type="html"><![CDATA[<h2 id="首发纪念"><a href="#首发纪念" class="headerlink" title="首发纪念"></a>首发纪念</h2><p>没啥 就是纪念一下今天 blog 搞好了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> vinv/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span> $(pifpaf run postgresql --host 127.0.0.1 --port )</span><br><span class="line"></span><br><span class="line">createuser -s postgres</span><br><span class="line"></span><br><span class="line">--cov mining_proxy(想看覆盖率的地方)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
